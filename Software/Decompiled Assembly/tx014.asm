* Label naming:
* ENTRY = Main entry point
* ENTnn = Additional entry point
* B = Byte
* D = Displaced branch/jump target
* F = Function JSR target
* I = 32-bit integer
* J = Jump target
* L = Label (generic)
* N = Bignum
* P = Pointer
* S = String
* W = Word
*
*
* Function ENTRY
*
8000:ENTRY FIL   (28)=' ',/S8300 ; =0x8300 =33536(-32000) [Fill with byte, literal=0xa0(160,-96), direct]
8006:      CAD/  W84B1      ; [Clear word at address]
800a:      LDA+  X+,2       ; [Load A indexed, displaced, direct, post-incremented]
800d:      STA/  W831F      ; =0x831f =33567(-31969) [Store A direct]
8010:      LDA+  X+,-2      ; [Load A indexed, displaced, direct, post-incremented]
8013:      STA/  W821B+1    ; =0x821c =33308(-32228) [Store A direct]
8016:      BNZ   D8023      ; =+11 [Branch if not zero]
8018:      INR   X,2        ; [Increment X by 2]
801a:      STK   X,6        ; [Push X Y Z to the stack]
801c:      STR/  W813C+2,S  ; =0x813e =33086(-32450) [Store S direct]
8020:      JMP/  J819D      ; =0x819d =33181(-32355) [Jump direct]
8023:D8023 STK   X,6        ; [Push X Y Z to the stack]
8025:      MVV   (21,0)-A,/S8300 ; =0x8300 =33536(-32000) [Move variable-length, indexed, direct]
802c:      BF    D8031      ; =+3 [Branch on fault]
802e:      LDAB= X'A0'      ; =160(-96) =' ' [Load AL with immediate]
8030:      STAB+ Z          ; [Store AL to address in Z]
8031:D8031 POP   X,6        ; [Pop Z Y X from the stack]
8033:      LDAB+ X+         ; [Load AL indexed, direct, post-incremented]
8035:      STAB/ B81BD      ; =0x81bd =33213(-32323) [Store AL direct]
8038:      INAB             ; [Increment AL]
8039:      STAB/ D8223+1    ; =0x8224 =33316(-32220) [Store AL direct]
803c:      LDAB+ X+         ; [Load AL indexed, direct, post-incremented]
803e:      STK   X,6        ; [Push X Y Z to the stack]
8040:      STR/  W813C+2,S  ; =0x813e =33086(-32450) [Store S direct]
8044:      XFRB  AL,AL      ; [Transfer AL to AL]
8046:      BZ    D8060      ; =+24 [Branch if zero]
8048:      DCAB             ; [Decrement AL]
8049:      BNZ   D8051      ; =+6 [Branch if not zero]
804b:      INAB             ; [Increment AL]
804c:      STAB/ W84B1      ; =0x84b1 =33969(-31567) =EOT,'1' [Store AL direct]
804f:      JMP   D8060      ; =+15 [Jump relative]
8051:D8051 DCAB             ; [Decrement AL]
8052:      BNZ   D805A      ; =+6 [Branch if not zero]
8054:      INAB             ; [Increment AL]
8055:      STAB/ B84B2      ; =0x84b2 =33970(-31566) =EOT,'2' [Store AL direct]
8058:      JMP   D8060      ; =+6 [Jump relative]
805a:D805A STAB/ B84B2      ; =0x84b2 =33970(-31566) =EOT,'2' [Store AL direct]
805d:      STAB/ W84B1      ; =0x84b1 =33969(-31567) =EOT,'1' [Store AL direct]
8060:D8060 LDAB/ D8223+1    ; =0x8224 =33316(-32220) [Load AL direct]
8063:      BNZ   D8068      ; =+3 [Branch if not zero]
8065:      JMP/  J816E      ; =0x816e =33134(-32402) [Jump direct]
8068:D8068 JSR/  F827B      ; =0x827b =33403(-32133) [Jump to subroutine direct]
806b:      STA/  W831D      ; =0x831d =33565(-31971) [Store A direct]
806e:      STBB/ D8252+1    ; =0x8253 =33363(-32173) [Store BL direct]
8071:      STX-  S-         ; [Store X indexed, pre-decremented, direct]
8073:      LDX/  X'0111'    ; =0x0111 =273 [Load X direct]
8076:      XFR/  X'010D',Z  ; =0x010d =269 [Transfer direct to Z]
807a:      LDM   =X'F8',/X'0185' ; =0x0185 =389 [Load 32 entries to map 0, literal=248, direct]
807f:D807F LDAB+ Z+         ; [Load AL indexed, direct, post-incremented]
8081:      BM    D80A8      ; =+37 [Branch on minus]
8083:      LDBB/ D8252+1    ; =0x8253 =33363(-32173) [Load BL direct]
8086:      SABB             ; [AL - BL -> BL]
8087:      BNZ   D80A8      ; =+31 [Branch if not zero]
8089:      LDA+  Z          ; [Load A from address in Z]
808a:      INA              ; [Increment A]
808b:      BZ    D80A8      ; =+27 [Branch if zero]
808d:      DCA              ; [Decrement A]
808e:      LDA+  A          ; [Load A from address in A]
808f:      CPF   (21)-A,9,/S8300 ; =0x8300 =33536(-32000) [Compare fixed-length, displaced indexed, direct]
8096:      BNZ   D80A8      ; =+16 [Branch if not zero]
8098:      LDA+  Z          ; [Load A from address in Z]
8099:      LDAB+ A,3        ; [Load AL indexed, displaced, direct]
809c:      LDBB= X'04'      ; =4 [Load BL with immediate]
809e:      NABB             ; [AL & BL -> BL]
809f:      BZ    D80AF      ; =+14 [Branch if zero]
80a1:      LDAB/ B84B2      ; =0x84b2 =33970(-31566) =EOT,'2' [Load AL direct]
80a4:      BZ    D80AF      ; =+9 [Branch if zero]
80a6:      JMP   D80EC      ; =+68 [Jump relative]
80a8:D80A8 LDA+  Z+         ; [Load A indexed, direct, post-incremented]
80aa:      DCX              ; [Decrement X]
80ab:      BM    D80BC      ; =+15 [Branch on minus]
80ad:      JMP   D807F      ; =-48 [Jump relative]
80af:D80AF LDA/  X'0103'    ; =0x0103 =259 [Load A direct]
80b2:      LDM   =X'F8',-A,54 ; [Load 32 entries to map 0, literal=248, displaced indexed]
80b7:      JSR/  F826A      ; =0x826a =33386(-32150) [Jump to subroutine direct]
80ba:      JMP   D8128      ; =+108 [Jump relative]
80bc:D80BC LDA/  X'0103'    ; =0x0103 =259 [Load A direct]
80bf:      LDM   =X'F8',-A,54 ; [Load 32 entries to map 0, literal=248, displaced indexed]
80c4:      LDAB/ B81BD      ; =0x81bd =33213(-32323) [Load AL direct]
80c7:      LDB=  S8300      ; =0x8300 =33536(-32000) [Load B with immediate]
80ca:      SVC   X'0E'      ; =14 [Service call DIRNM - search directory for file name specified]
80cc:      DW    W8321      ; =0x8321 =33569(-31967) [TODO: arg 1]
80ce:      XAB              ; [Transfer A to B]
80cf:      BNZ   D80D6      ; =+5 [Branch if not zero]
80d1:      LDA=  X'FFFE'    ; =0xfffe =65534(-2) [Load A with immediate]
80d4:      JMP   J812A      ; =+84 [Jump relative]
80d6:D80D6 STA/  W8227+2    ; =0x8229 =33321(-32215) [Store A direct]
80d9:      LDA/  X'0103'    ; =0x0103 =259 [Load A direct]
80dc:      LDA+  A,8        ; [Load A indexed, displaced, direct]
80df:      LDB=  X'8000'    ; =0x8000 =32768(-32768) [Load B with immediate]
80e2:      LDBB+ A,19       ; [Load BL indexed, displaced, direct]
80e5:      ORIB  BU,BL      ; [BU | BL -> BL]
80e7:      STBB+ A,19       ; [Store BL indexed, displaced, direct]
80ea:      JMP   D814F      ; =+99 [Jump relative]
80ec:D80EC LDA/  X'0103'    ; =0x0103 =259 [Load A direct]
80ef:      LDM   =X'F8',-A,54 ; [Load 32 entries to map 0, literal=248, displaced indexed]
80f4:      SVC   X'16'      ; =22 [Service call GMEM - get memory block from transient area]
80f6:      DW    X'0008'    ; =0x0008 =8 [TODO: arg1] [TODO: arg2]
80f8:W80F8 DW    X'0000'    ; =0x0000 =0 =NUL,NUL
80fa:      LDM   =X'F8',/X'0185' ; =0x0185 =389 [Load 32 entries to map 0, literal=248, direct]
80ff:      LDX   W80F8      ; =-9 [Load X relative]
8101:      STX/  W8227+2    ; =0x8229 =33321(-32215) [Store X direct]
8104:      CLA              ; [Clear A]
8105:      STA+  X,4        ; [Store A indexed, displaced, direct]
8108:      STA+  X,6        ; [Store A indexed, displaced, direct]
810b:      STAB+ X,3        ; [Store AL indexed, displaced, direct]
810e:      LDA/  X'0103'    ; =0x0103 =259 [Load A direct]
8111:      LDAB+ A,1        ; [Load AL indexed, displaced, direct]
8114:      STAB+ X,2        ; [Store AL indexed, displaced, direct]
8117:      LDA+  Z          ; [Load A from address in Z]
8118:      LDA+  A          ; [Load A from address in A]
8119:      STA+  X          ; [Store A to address in X]
811a:      LDBB+ A          ; [Load BL from address in A]
811b:      INRB  BL         ; [Increment BL by 1]
811d:      STBB+ A          ; [Store BL to address in A]
811e:      LDX/  X'0103'    ; =0x0103 =259 [Load X direct]
8121:      LDM   =X'F8',-X,54 ; [Load 32 entries to map 0, literal=248, displaced indexed]
8126:      JMP   D814F      ; =+39 [Jump relative]
8128:D8128 CLA              ; [Clear A]
8129:      DCA              ; [Decrement A]
812a:J812A XFR/  W813C+2,S  ; =0x813e =33086(-32450) [Transfer direct to S]
812e:      LDX/  X'0103'    ; =0x0103 =259 [Load X direct]
8131:      LDM   =X'F8',-X,54 ; [Load 32 entries to map 0, literal=248, displaced indexed]
8136:      POP   X,6        ; [Pop Z Y X from the stack]
8138:      SVC   X'01'      ; =1 [Service call TRTN - transient return]
813a:      DW    X'FFFF'    ; =0xffff =65535(-1) [return code]
813c:W813C XFR=  X'0000',S  ; =0x0000 =0 =NUL,NUL [Transfer immediate to S]
8140:      LDX/  X'0103'    ; =0x0103 =259 [Load X direct]
8143:      LDM   =X'F8',-X,54 ; [Load 32 entries to map 0, literal=248, displaced indexed]
8148:      POP   X,6        ; [Pop Z Y X from the stack]
814a:      CLA              ; [Clear A]
814b:      SVC   X'01'      ; =1 [Service call TRTN - transient return]
814d:      DW    X'FFFF'    ; =0xffff =65535(-1) [return code]
*
814f:D814F LDX+  S+         ; [Load X indexed, direct, post-incremented]
8151:      XFR/  X'005A',Z  ; =0x005a =90 [Transfer direct to Z]
8155:      JSR   F81B3      ; =+92 [Jump to subroutine relative]
8157:      DB    X'01'      ; =0x01 =1
8158:      SVC   X'0B'      ; =11 [Service call DT - get binary date]
815a:      LDB*  P81C0      ; =+100 [Load B relative indirect]
815c:      SAB              ; [A - B -> B]
815d:      BZ    J819D      ; =+62 [Branch if zero]
815f:      STA*  P81C0      ; =+95 [Store A relative indirect]
8161:      SVC   X'06'      ; =6 [Service call FLWT - wait for flag to go positive]
8163:      DB    X'1C'      ; =0x1c =28 [TODO: arg 1]
8164:      JSR   F81B3      ; =+77 [Jump to subroutine relative]
8166:      DB    X'02'      ; =0x02 =2
8167:      LDBB= X'FF'      ; =255(-1) [Load BL with immediate]
8169:      STBB+ Z,28       ; [Store BL indexed, displaced, direct]
816c:      JMP   J819D      ; =+47 [Jump relative]
816e:J816E STK   Y,4        ; [Push Y Z to the stack]
8170:      LDB=  X'0006'    ; =0x0006 =6 [Load B with immediate]
8173:      XFR=  S8300,Y    ; =0x8300 =33536(-32000) [Transfer immediate to Y]
8177:      XFR=  W8317,Z    ; =0x8317 =33559(-31977) [Transfer immediate to Z]
817b:D817B LDAB+ Y+         ; [Load AL indexed, direct, post-incremented]
817d:      BZ    D8185      ; =+6 [Branch if zero]
817f:      STAB+ Z+         ; [Store AL indexed, direct, post-incremented]
8181:      DCR   B          ; [Decrement B by 1]
8183:      BGZ   D817B      ; =-10 [Branch if greater than zero]
8185:D8185 POP   Y,4        ; [Pop Z Y from the stack]
8187:      JSR/  F82A7      ; =0x82a7 =33447(-32089) [Jump to subroutine direct]
818a:      STA/  W831D      ; =0x831d =33565(-31971) [Store A direct]
818d:      STBB/ D8252+1    ; =0x8253 =33363(-32173) [Store BL direct]
8190:      LDAB+ A          ; [Load AL from address in A]
8191:      LDBB= X'20'      ; =32 [Load BL with immediate]
8193:      NABB             ; [AL & BL -> BL]
8194:      BZ    J819D      ; =+7 [Branch if zero]
8196:      LDBB= X'04'      ; =4 [Load BL with immediate]
8198:      NABB             ; [AL & BL -> BL]
8199:      BNZ   J819D      ; =+2 [Branch if not zero]
819b:      JMP   D8128      ; =-117 [Jump relative]
819d:J819D LDA/  W831F      ; =0x831f =33567(-31969) [Load A direct]
81a0:      LDAB+ A,1        ; [Load AL indexed, displaced, direct]
81a3:      BM    D8128      ; =-125 [Branch on minus]
81a5:      CLRB  AU         ; [Clear AU]
81a7:      LDB/  X'0103'    ; =0x0103 =259 [Load B direct]
81aa:      LDBB+ B,6        ; [Load BL indexed, displaced, direct]
81ad:      CLRB  BU         ; [Clear BU]
81af:      ADD   B,A        ; [B + A -> A]
81b1:      JMP   D81C4      ; =+17 [Jump relative]
*
* Function F81B3
*
81b3:F81B3 LDAB+ X+         ; [Load AL indexed, direct, post-incremented]
81b5:      STAB  B81C2      ; =+11 [Store AL relative]
81b7:      SVC   X'4C'      ; =76 [Service call DIO - disk I/O]
81b9:      DW    X'0190'    ; =0x0190 =400
81bb:      DW    W82C8      ; =0x82c8 =33480(-32056) [TODO: arg1]
81bd:B81BD DW    X'0000'    ; =0x0000 =0 =NUL,NUL [TODO: arg2]
81bf:      DB    X'0E'      ; =0x0e =14 [TODO: arg3]
81c0:P81C0 DW    W8321      ; =0x8321 =33569(-31967) [TODO: arg4]
81c2:B81C2 DB    X'00'      ; =0x00 =0 =NUL [TODO: arg5]
81c3:      RSR              ; [Return from subroutine]
*
81c4:D81C4 XFR/  X'0103',Z  ; =0x0103 =259 [Transfer direct to Z]
81c8:      CLR   B          ; [Clear B]
81ca:      LDBB+ Z,7        ; [Load BL indexed, displaced, direct]
81cd:      SAB              ; [A - B -> B]
81ce:      BLE   D81D3      ; =+3 [Branch if less than or equal to zero]
81d0:      JMP/  D8128      ; =0x8128 =33064(-32472) [Jump direct]
81d3:D81D3 LDX+  Z,4        ; [Load X indexed, displaced, direct]
81d6:      XAB              ; [Transfer A to B]
81d7:      SLA              ; [Left shift A]
81d8:      AAB              ; [A + B -> B]
81d9:      ADD   B,X        ; [B + X -> X]
81db:      XFR/  X'005A',Z  ; =0x005a =90 [Transfer direct to Z]
81df:      CLA              ; [Clear A]
81e0:      LDM   =X'F8',/X'0185' ; =0x0185 =389 [Load 32 entries to map 0, literal=248, direct]
81e5:      LDAB+ X          ; [Load AL from address in X]
81e6:      BM    D81FA      ; =+18 [Branch on minus]
81e8:      LDB+  Z,9        ; [Load B indexed, displaced, direct]
81eb:      SLA              ; [Left shift A]
81ec:      AAB              ; [A + B -> B]
81ed:      LDB+  B          ; [Load B from address in B]
81ee:      LDA+  B          ; [Load A from address in B]
81ef:      LDAB= X'04'      ; =4 [Load AL with immediate]
81f1:      ANDB  AU,AL      ; [AU & AL -> AL]
81f3:      BNZ   D81FA      ; =+5 [Branch if not zero]
81f5:      LDAB= X'DF'      ; =223(-33) =DEL [Load AL with immediate]
81f7:      ANDB  AU,AL      ; [AU & AL -> AL]
81f9:      STAB+ B          ; [Store AL to address in B]
81fa:D81FA LDA+  X,1        ; [Load A indexed, displaced, direct]
81fd:      LDB=  X'FFFF'    ; =0xffff =65535(-1) [Load B with immediate]
8200:      STBB+ X          ; [Store BL to address in X]
8201:      STB+  X,1        ; [Store B indexed, displaced, direct]
8204:      INA              ; [Increment A]
8205:      BZ    W821B      ; =+20 [Branch if zero]
8207:      DCA              ; [Decrement A]
8208:      STA   W8214      ; =+10 [Store A relative]
820a:      LDA/  X'0103'    ; =0x0103 =259 [Load A direct]
820d:      LDM   =X'F8',-A,54 ; [Load 32 entries to map 0, literal=248, displaced indexed]
8212:      SVC   X'17'      ; =23 [Service call RMEM - release memory block back to transient area]
8214:W8214 DW    X'0000'    ; =0x0000 =0 =NUL,NUL [TODO: arg1]
8216:      LDM   =X'F8',/X'0185' ; =0x0185 =389 [Load 32 entries to map 0, literal=248, direct]
821b:W821B LDB=  X'0000'    ; =0x0000 =0 =NUL,NUL [Load B with immediate]
821e:      BNZ   D8223      ; =+3 [Branch if not zero]
8220:      JMP/  W813C      ; =0x813c =33084(-32452) [Jump direct]
8223:D8223 LDAB= X'00'      ; =0 =NUL [Load AL with immediate]
8225:      BZ    D8252      ; =+43 [Branch if zero]
8227:W8227 XFR=  X'0000',Z  ; =0x0000 =0 =NUL,NUL [Transfer immediate to Z]
822b:      XFR/  W831D,Y    ; =0x831d =33565(-31971) [Transfer direct to Y]
822f:      LDAB+ Y          ; [Load AL from address in Y]
8230:      LDBB= X'03'      ; =3 [Load BL with immediate]
8232:      NABB             ; [AL & BL -> BL]
8233:      LDAB/ B84B2      ; =0x84b2 =33970(-31566) =EOT,'2' [Load AL direct]
8236:      BZ    D823C      ; =+4 [Branch if zero]
8238:      LDAB= X'04'      ; =4 [Load AL with immediate]
823a:      ORIB  AL,BL      ; [AL | BL -> BL]
823c:D823C LDAB/ W84B1      ; =0x84b1 =33969(-31567) =EOT,'1' [Load AL direct]
823f:      BZ    D8245      ; =+4 [Branch if zero]
8241:      LDAB= X'10'      ; =16 [Load AL with immediate]
8243:      ORIB  AL,BL      ; [AL | BL -> BL]
8245:D8245 STBB+ Z,3        ; [Store BL indexed, displaced, direct]
8248:      LDA+  Z          ; [Load A from address in Z]
8249:      STR-  X,1,Z      ; [Store Z indexed-displaced]
824d:      LDBB= X'7E'      ; =126 [Load BL with immediate]
824f:      STBB+ Z,-1       ; [Store BL indexed, displaced, direct]
8252:D8252 LDAB= X'00'      ; =0 =NUL [Load AL with immediate]
8254:      STAB+ X          ; [Store AL to address in X]
8255:      LDA/  X'0103'    ; =0x0103 =259 [Load A direct]
8258:      LDM   =X'F8',-A,54 ; [Load 32 entries to map 0, literal=248, displaced indexed]
825d:      XFR/  W831D,Y    ; =0x831d =33565(-31971) [Transfer direct to Y]
8261:      LDAB+ Y          ; [Load AL from address in Y]
8262:      LDBB= X'20'      ; =32 [Load BL with immediate]
8264:      ORIB  AL,BL      ; [AL | BL -> BL]
8266:      STBB+ Y          ; [Store BL to address in Y]
8267:      JMP/  W813C      ; =0x813c =33084(-32452) [Jump direct]
*
* Function F826A
*
826a:F826A LDA/  X'0103'    ; =0x0103 =259 [Load A direct]
826d:      LDA+  A,8        ; [Load A indexed, displaced, direct]
8270:      XAY              ; [Transfer A to Y]
8271:      LDAB+ Y,19       ; [Load AL indexed, displaced, direct]
8274:      LDBB= X'7F'      ; =127 [Load BL with immediate]
8276:      NABB             ; [AL & BL -> BL]
8277:      STBB+ Y,19       ; [Store BL indexed, displaced, direct]
827a:      RSR              ; [Return from subroutine]
*
* Function F827B
*
827b:F827B STK   X,4        ; [Push X Y to the stack]
827d:      LDA/  X'0109'    ; =0x0109 =265 [Load A direct]
8280:      XAY              ; [Transfer A to Y]
8281:      LDAB/ B81BD      ; =0x81bd =33213(-32323) [Load AL direct]
8284:D8284 LDX+  Y+         ; [Load X indexed, direct, post-incremented]
8286:      BZ    D82C2      ; =+58 [Branch if zero]
8288:      LDBB+ X          ; [Load BL from address in X]
8289:      BZ    D8284      ; =-7 [Branch if zero]
828b:      LDB+  X,1        ; [Load B indexed, displaced, direct]
828e:      LDBB= X'04'      ; =4 [Load BL with immediate]
8290:      SUBB  BU,BL      ; [BU - BL -> BL]
8292:      BNZ   D8284      ; =-16 [Branch if not zero]
8294:      LDBB+ X,2        ; [Load BL indexed, displaced, direct]
8297:      SABB             ; [AL - BL -> BL]
8298:      BNZ   D8284      ; =-22 [Branch if not zero]
829a:D829A LDA/  X'0109'    ; =0x0109 =265 [Load A direct]
829d:      SUB   Y,A        ; [Y - A -> A]
829f:      SRA              ; [Right shift A]
82a0:      DCA              ; [Decrement A]
82a1:      XAB              ; [Transfer A to B]
82a2:      XFR   X,A        ; [Transfer X to A]
82a4:      POP   X,4        ; [Pop Y X from the stack]
82a6:      RSR              ; [Return from subroutine]
*
* Function F82A7
*
82a7:F82A7 STK   X,4        ; [Push X Y to the stack]
82a9:      XFR/  X'0109',Y  ; =0x0109 =265 [Transfer direct to Y]
82ad:D82AD LDX+  Y+         ; [Load X indexed, direct, post-incremented]
82af:      BZ    D82C2      ; =+17 [Branch if zero]
82b1:      LDBB+ X          ; [Load BL from address in X]
82b2:      BZ    D82AD      ; =-7 [Branch if zero]
82b4:      ADD=  X'0007',X,A ; =0x0007 =7 [7 + X -> A]
82b8:      CPF   (6)-A,/W8317 ; =0x8317 =33559(-31977) [Compare fixed-length, indexed, direct]
82be:      BZ    D829A      ; =-38 [Branch if zero]
82c0:      JMP   D82AD      ; =-21 [Jump relative]
82c2:D82C2 LDA=  X'FFFE'    ; =0xfffe =65534(-2) [Load A with immediate]
82c5:      JMP/  J812A      ; =0x812a =33066(-32470) [Jump direct]
*
82c8:W82C8 DW    W82D0      ; =0x82d0 =33488(-32048)
82ca:      DB    0,6        ; =0x00,0x0006
82d0:W82D0 DW    X'0100'    ; =0x0100 =256
82d2:      DW    X'FFFF'    ; =0xffff =65535(-1)
82d4:      DW    X'0F00'    ; =0x0f00 =3840
82d6:      DB    0,37       ; =0x00,0x0025
82fb:      DW    S82FD      ; =0x82fd =33533(-32003)
82fd:S82FD DB    0,3        ; =0x00,0x0003
8300:S8300 DC    '                      '
8316:      DB    X'00'      ; =0x00 =0 =NUL
8317:W8317 DS    6          ; =0x0006 [Uninitialized memory]
831d:W831D DS    2          ; =0x0002 [Uninitialized memory]
831f:W831F DS    2          ; =0x0002 [Uninitialized memory]
8321:W8321 DS    400        ; =0x0190 [Uninitialized memory]
84b1:W84B1 DB    X'00'      ; =0x00 =0 =NUL
84b2:B84B2                 
84b3:ENDPT
