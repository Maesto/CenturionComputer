; Tape demo by ren14500. Public domain.
TITLE 'TAPE'
SYSTEM ZTAPE(MAIN,EXP=D,LL=80)
FILE CRT:SYSIPT,CLASS=1,SEQ     ; CRT for user interaction.
FILE TAPEOUT:SYS000,CLASS=1,SEQ ; CRT to simulate write to tape controller.
FILE TAPEIN:SYS001,CLASS=1,SEQ  ; CRT to simulate read from tape controller.
STRING CURRLINE(80),TWO(2),ONE(1)
INTEGER CMDINT,ASCINT,LINENUM,LINESBYTES,TMP1,TMP2,I
SET SIXTEEN:16,L1:0,L2:0
TABLE LINES(80,1600)
TABLE STATUSDESC(10,20)
RECORD REC1(1)
  STRING R1(1)
ENDREC
FORMAT FULLLINE:C80
FORMAT INT1:N1
FORMAT STATUSFMT:X1,C1,X1,C1,C7,C1
EXTERNAL BLTRUN
ENTRYPOINT CRT,TAPEOUT,TAPEIN
ENTRY
'TWO'="'0'"\'TWO'="''"
'STATUSDESC'="'SUCCESS'"\TBLPUT STATUSDESC(1)
'STATUSDESC'="'FAILURE'"\TBLPUT STATUSDESC(2)
OPEN IO(CRT)
OPEN OUTPUT(TAPEOUT)
OPEN IO(TAPEIN)
CALL CLRTAPE
WRITE(CRT,FULLLINE)EJECT
WRITE(CRT,FULLLINE)'TAPE DEMO'
; Main loop start.
TOP:
  ; Prompt for the next command and dispatch.
  WRITE(CRT,FULLLINE)''
  WRITE(CRT,FULLLINE)''
  WRITE(CRT,FULLLINE)'0 = REWIND TAPE'
  WRITE(CRT,FULLLINE)'1 = READ FROM TAPE'
  WRITE(CRT,FULLLINE)'2 = WRITE TO TAPE'
  WRITE(CRT,FULLLINE)'8 = CLEAR CRTS'
  WRITE(CRT,FULLLINE)'9 = QUIT'
  WRITEN(CRT,FULLLINE)'COMMAND>'
  READB(CRT,REC1)
  WRITE(CRT,FULLLINE)''
  WRITE(CRT,FULLLINE)''
  DECODE(R1,INT1)CMDINT
  IF(CMDINT.EQ.0)CALL TAPE0
  IF(CMDINT.EQ.1)CALL TAPE1
  IF(CMDINT.EQ.2)CALL TAPE2
  IF(CMDINT.EQ.8)CALL CLRTAPE
  IF(CMDINT.EQ.9)GO TO DONE
GO TO TOP
; Cleanup.
DONE:
; Close files. Exit the program with condition code 0 for success.
CLOSE CRT,TAPEOUT,TAPEIN
STOP 0
; Rewind tape.
SUBROUTINE TAPE0
  ; Send the rewind command and wait for the status reply.
  WRITEN(TAPEOUT,FULLLINE)'0'
  WRITEN(CRT,FULLLINE)'SENT REWIND CMD; WAITING FOR STATUS...'
  CALL GETSTATUS
RETURN
; Read from tape.
SUBROUTINE TAPE1
  ; Send the read command and wait for the status reply.
  WRITEN(TAPEOUT,FULLLINE)'1'
  WRITEN(CRT,FULLLINE)'SENT READ CMD; WAITING FOR STATUS...'
  CALL GETSTATUS
  IF(ASCINT.EQ.1)DO
    ; Get the data.
    WRITEN(CRT,FULLLINE)'RECEIVING DATA...'
    ; Decode the length to read.
    READB(TAPEIN,REC1) \ 'ONE'='R1' \ L1=TWO-176 ; =0xB0
    READB(TAPEIN,REC1) \ 'ONE'='R1' \ L1=L1+((TWO-176)*16)
    READB(TAPEIN,REC1) \ 'ONE'='R1' \ L1=L1+((TWO-176)*256)
    READB(TAPEIN,REC1) \ 'ONE'='R1' \ L1=L1+((TWO-176)*4096)
    ; Read that length.
    LINENUM=1
    LOOP WHILE(L1.GT.0)
      ; Decode the line length.
      READB(TAPEIN,REC1) \ 'ONE'='R1' \ I=TWO-176 ; =0xB0
      READB(TAPEIN,REC1) \ 'ONE'='R1' \ I=I+((TWO-176)*16)
      L1=L1-2-I
      ; Read each character of the line.
      'CURRLINE'="''"
      LOOP WHILE(I.GT.0)
        READB(TAPEIN,REC1)
        'CURRLINE'='CURRLINE+R1'
        DECR I
      END LOOP
      ; Save the line.
      'LINES'='CURRLINE'\TBLPUT LINES(LINENUM)
      INCR LINENUM
    END LOOP
    ; Get the final status.
    WRITE(CRT,FULLLINE)' DONE'
    WRITEN(CRT,FULLLINE)'WAITING FOR STATUS...'
    CALL GETSTATUS
    ; Display the lines.
    WRITE(CRT,FULLLINE)'RECEIVED DATA:'
    DECR LINENUM
    LOOP I(1,LINENUM,1)
      TBLGET LINES(I)
      'CURRLINE'='LINES'
      WRITE(CRT,FULLLINE)CURRLINE
    END LOOP
    WRITE(CRT,FULLLINE)'END OF RECEIVED DATA'
  END DO
RETURN
; Write to tape.
SUBROUTINE TAPE2
  ; Get the input to write to the tape.
  WRITE(CRT,FULLLINE)'UP TO 20 LINES; . BY ITSELF TO END'
  LINENUM=1
  LINESBYTES=0
  T2LOOP:
    READ(CRT,FULLLINE)CURRLINE
    IFS(CURRLINE.NE.'.')DO
      CALL BLTRUN(CURRLINE)
      'LINES'='CURRLINE'
      TBLPUT LINES(LINENUM)
      INCR LINENUM
      LINESBYTES=LINESBYTES+LEN(CURRLINE)+2 ; +2 for length prefix
      GO TO T2LOOP
    END DO
  ; Send the write command.
  WRITEN(TAPEOUT,FULLLINE)'2'
  ; Encode the length to write and send it.
  L1=-1330597712; =0xB0B0B0B0
  TMP1=LINESBYTES/SIXTEEN \ TMP2=@REM \ L1=L1+(TMP2*16777216)
  TMP1=TMP1/SIXTEEN       \ TMP2=@REM \ L1=L1+(TMP2*65536)
  TMP1=TMP1/SIXTEEN       \ TMP2=@REM \ L1=L1+(TMP2*256)
  TMP1=TMP1/SIXTEEN       \ TMP2=@REM \ L1=L1+TMP2
  WRITEN(TAPEOUT,FULLLINE)L1
  ; Send each line.
  DECR LINENUM
  LOOP I(1,LINENUM,1)
    ; Get the line.
    TBLGET LINES(I)
    'CURRLINE'='LINES'
    ; Encode the length of the line and send it.
    L1=-1330642944; =0xB0B00000
    TMP1=LEN(CURRLINE)/SIXTEEN \ TMP2=@REM \ L1=L1+(TMP2*16777216)
    TMP1=TMP1/SIXTEEN          \ TMP2=@REM \ L1=L1+(TMP2*65536)
    WRITEN(TAPEOUT,FULLLINE)L1
    WRITEN(TAPEOUT,FULLLINE)CURRLINE
  END LOOP
  ; Wait for status.
  WRITEN(CRT,FULLLINE)'SENT WRITE CMD, LEN, DATA; WAITING FOR STATUS...'
  CALL GETSTATUS
RETURN
; Clear tape consoles.
SUBROUTINE CLRTAPE
  LOOP TMP1(0,48,1)
    WRITE(TAPEOUT,FULLLINE)''
    WRITE(TAPEIN,FULLLINE)''
  END LOOP
RETURN
; Wait for status and print it.
SUBROUTINE GETSTATUS
  READB(TAPEIN,REC1)
  DECODE(R1,INT1)ASCINT
  INCR ASCINT
  IF(ASCINT.LE.2)DO
    TBLGET STATUSDESC(ASCINT)
    'CURRLINE'='STATUSDESC'
  END DO
  ELSE 'CURRLINE'="'UNKNOWN'"
  WRITE(CRT,STATUSFMT)R1,'(',CURRLINE,')'
RETURN
; End of source.
END

