* Label naming:
* ENTRY = Entry point
* B = Byte
* D = Displaced branch/jump target
* F = Function JSR target
* J = Jump target
* L = Label (generic)
* N = Bignum
* S = String
* W = Word
*
PROG  BEGIN 0
      DS    100        ; =0x0064 [Uninitialized memory]
ENTRY XFR=  ENTRY,S    ; =0x0064 =100 [Transfer immediate to S]
      JSR/  F0284      ; =0x0284 =644 [Jump to subroutine direct]
J006B LDB=  W0503      ; =0x0503 =1283 [Load B with immediate]
      SVC   92         ; =0x5C [Service call GBKV - get OS block value]
      DB    X'01'      ; =0x01 =1 [TODO: arg1]
      DB    X'01'      ; =0x01 =1 [TODO: arg2]
      DB    X'01'      ; =0x01 =1 [TODO: arg3]
      DW    W0542      ; =0x0542 =1346 [address to store block value]
      LDB=  L04E5      ; =0x04E5 =1253 [Load B with immediate]
      SVC   82         ; =0x52 [Service call GIOB - unprotected GIOB]
      DB    X'01'      ; =0x01 =1 [TODO: arg1]
      DB    X'02'      ; =0x02 =2 [TODO: arg2]
      DB    X'02'      ; =0x02 =2 [TODO: arg3]
      DW    W0548      ; =0x0548 =1352 [TODO: address]
      LDB=  L04E5      ; =0x04E5 =1253 [Load B with immediate]
      SVC   82         ; =0x52 [Service call GIOB - unprotected GIOB]
      DB    X'01'      ; =0x01 =1 [TODO: arg1]
      DB    X'15'      ; =0x15 =21 [TODO: arg2]
      DB    X'09'      ; =0x09 =9 [TODO: arg3]
      DW    S0466      ; =0x0466 =1126 [TODO: address]
      MVF   (21)/S0466,/S0407 ; =0x0466 =1126,=0x0407 =1031 [Memory move, direct, direct]
      SVC   28         ; =0x1C [Service call GC - get character time]
      DW    S0442      ; =0x0442 =1090 [address to put time]
      LDAB= X'A0'      ; =160(-96) =' ' [Load AL with immediate]
      STAB/ S044A      ; =0x044A =1098 [Store AL direct]
      SVC   11         ; =0x0B [Service call DT - get binary date]
      SVC   5          ; =0x05 [Service call TS - load transient module]
      DB    X'04'      ; =0x04 =4 [TODO: selector]
      DW    S0436      ; =0x0436 =1078 [address of string]
      LDB=  W0503      ; =0x0503 =1283 [Load B with immediate]
      LDAB= X'09'      ; =9 [Load AL with immediate]
      STAB+ B,3        ; [Store AL indexed, displaced, direct, post-incremented]
      SVC   24         ; =0x18 [Service call LIOC - logical I/O control]
      LDAB= X'02'      ; =2 [Load AL with immediate]
      STAB/ B0506      ; =0x0506 =1286 [Store AL direct]
      LDAB/ W0542      ; =0x0542 =1346 [Load AL direct]
      DCRB  AL,2       ; [Decrement AL by 2]
      BZ    D00B9      ; =+3 [Branch if zero]
      JMP/  J01C1      ; =0x01C1 =449 [Jump direct]
D00B9 JSR/  F032B      ; =0x032B =811 [Jump to subroutine direct]
N00BC DB    0,3        ; =0x00,0x0003
      JSR/  F0166      ; =0x0166 =358 [Jump to subroutine direct]
D00C2 JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W038D      ; =0x038D =909
      JSR/  F02F2      ; =0x02F2 =754 [Jump to subroutine direct]
      JSR/  F0811      ; =0x0811 =2065 [Jump to subroutine direct]
      DW    W0559      ; =0x0559 =1369
      LDAB/ S055B      ; =0x055B =1371 [Load AL direct]
      LDBB= X'C6'      ; =198(-58) ='F' [Load BL with immediate]
      SABB             ; [AL - BL -> BL]
      BZ    D011F      ; =+72 [Branch if zero]
      LDBB= X'D1'      ; =209(-47) ='Q' [Load BL with immediate]
      SABB             ; [AL - BL -> BL]
      BZ    J012B      ; =+79 [Branch if zero]
      LDBB= X'CE'      ; =206(-50) ='N' [Load BL with immediate]
      SABB             ; [AL - BL -> BL]
      BZ    D014E      ; =+109 [Branch if zero]
      LDBB= X'D0'      ; =208(-48) ='P' [Load BL with immediate]
      SABB             ; [AL - BL -> BL]
      BZ    D0156      ; =+112 [Branch if zero]
      LDA/  W0559      ; =0x0559 =1369 [Load A direct]
      BZ    D00F4      ; =+9 [Branch if zero]
      CTB   /S055B(10),/N00BC(3) ; =0x055B =1371,=0x00BC =188 [Convert to bignum, direct, direct]
      BNF   D0105      ; =+17 [Branch on no fault]
D00F4 JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W067A      ; =0x067A =1658
      JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W03BC      ; =0x03BC =956
      JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W067A      ; =0x067A =1658
      JMP   D00C2      ; =-67 [Jump relative]
D0105 C     /N00BC(3),/N0547(3) ; =0x00BC =188,=0x0547 =1351 [Compare bignums, direct, direct]
      BP    D00B9      ; =-85 [Branch on plus]
D010E JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W067A      ; =0x067A =1658
      JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W03CD      ; =0x03CD =973
      JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W067A      ; =0x067A =1658
      JMP   D00C2      ; =-93 [Jump relative]
D011F ZAD   =0,/N00BC(3) ; =0x00BC =188 [Copy bignum, literal=0x00, direct]
      JSR/  F0284      ; =0x0284 =644 [Jump to subroutine direct]
      JMP/  J006B      ; =0x006B =107 [Jump direct]
J012B LDAB/ W0542      ; =0x0542 =1346 [Load AL direct]
      DCRB  AL,4       ; [Decrement AL by 4]
      BNZ   D0137      ; =+5 [Branch if not zero]
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W0555      ; =0x0555 =1365
D0137 LDA/  W0540      ; =0x0540 =1344 [Load A direct]
      BNZ   D0146      ; =+10 [Branch if not zero]
      LDAB= X'0A'      ; =10 [Load AL with immediate]
      STAB/ B0506      ; =0x0506 =1286 [Store AL direct]
      LDB=  W0503      ; =0x0503 =1283 [Load B with immediate]
      SVC   24         ; =0x18 [Service call LIOC - logical I/O control]
D0146 JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W03E6      ; =0x03E6 =998
      SVC   10         ; =0x0A [Service call EXIT - exit to OJX00]
      DB    X'FF'      ; =0xFF =255(-1) [completion code]
D014E A     =1,/N00BC(3) ; =0x00BC =188 [Add bignums, literal=0x01, direct]
      JMP   D0105      ; =-81 [Jump relative]
D0156 S     =1,/N00BC(3) ; =0x00BC =188 [Subtract bignums, literal=0x01, direct]
      BP    D0105      ; =-89 [Branch on plus]
      ZAD   =0,/N00BC(3) ; =0x00BC =188 [Copy bignum, literal=0x00, direct]
      JMP   D010E      ; =-88 [Jump relative]
*
* Function F0166
*
F0166 STK   XU,6       ; [Push X Y Z to the stack]
      MVF   (5)/S0550,/W042D ; =0x0550 =1360,=0x042D =1069 [Memory move, direct, direct]
      LDBB= X'B0'      ; =176(-80) ='0' [Load BL with immediate]
      CLR   A,5        ; [Set A to 5]
      CFB   /W042D(10),/N00BC(3) ; =0x042D =1069,=0x00BC =188 [Convert from bignum, direct, direct]
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W0677      ; =0x0677 =1655
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W03F7      ; =0x03F7 =1015
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W067A      ; =0x067A =1658
      LDX=  W0680      ; =0x0680 =1664 [Load X with immediate]
      LDA=  X'0013'    ; =0x0013 =19 [Load A with immediate]
      STA/  W054A      ; =0x054A =1354 [Store A direct]
D0192 XFR=  S05AD,Y    ; =0x05AD =1453 [Transfer immediate to Y]
      XFR=  S05E9,Z    ; =0x05E9 =1513 [Transfer immediate to Z]
      LDA=  X'0013'    ; =0x0013 =19 [Load A with immediate]
      STA/  W054C      ; =0x054C =1356 [Store A direct]
D01A0 LDAB+ X+         ; [Load AL indexed, direct, post-incremented]
      JSR/  F033E      ; =0x033E =830 [Jump to subroutine direct]
      JSR/  F0355      ; =0x0355 =853 [Jump to subroutine direct]
      DEC/  W054C      ; =0x054C =1356 [Decrement word at address by 1]
      BP    D01A0      ; =-14 [Branch on plus]
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W05AB      ; =0x05AB =1451
      DEC/  W054A      ; =0x054A =1354 [Decrement word at address by 1]
      BP    D0192      ; =-39 [Branch on plus]
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W067A      ; =0x067A =1658
      POP   XU,6       ; [Pop Z Y X from the stack]
      RSR              ; [Return from subroutine]
*
J01C1 JSR/  F032B      ; =0x032B =811 [Jump to subroutine direct]
N01C4 DB    0,3        ; =0x00,0x0003
      JSR/  F0205      ; =0x0205 =517 [Jump to subroutine direct]
      A     =1,/N01C4(3) ; =0x01C4 =452 [Add bignums, literal=0x01, direct]
      C     /N01C4(3),/N0547(3) ; =0x01C4 =452,=0x0547 =1351 [Compare bignums, direct, direct]
      BP    J01C1      ; =-24 [Branch on plus]
      LDAB/ W0542      ; =0x0542 =1346 [Load AL direct]
      DCRB  AL,4       ; [Decrement AL by 4]
      BNZ   D01E5      ; =+5 [Branch if not zero]
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W0555      ; =0x0555 =1365
D01E5 LDAB= X'0A'      ; =10 [Load AL with immediate]
      STAB/ B0506      ; =0x0506 =1286 [Store AL direct]
      LDB=  W0503      ; =0x0503 =1283 [Load B with immediate]
      SVC   24         ; =0x18 [Service call LIOC - logical I/O control]
      JSR/  F0284      ; =0x0284 =644 [Jump to subroutine direct]
      ZAD   =0,/N01C4(3) ; =0x01C4 =452 [Copy bignum, literal=0x00, direct]
      LDB=  W0503      ; =0x0503 =1283 [Load B with immediate]
      LDAB= X'09'      ; =9 [Load AL with immediate]
      STAB+ B,3        ; [Store AL indexed, displaced, direct, post-incremented]
      SVC   24         ; =0x18 [Service call LIOC - logical I/O control]
      JMP/  J006B      ; =0x006B =107 [Jump direct]
*
* Function F0205
*
F0205 STK   XU,6       ; [Push X Y Z to the stack]
      DEC/  W054E      ; =0x054E =1358 [Decrement word at address by 1]
      BNZ   D022B      ; =+30 [Branch if not zero]
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W0677      ; =0x0677 =1655
      LDX=  X'0005'    ; =0x0005 =5 [Load X with immediate]
D0215 JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W067A      ; =0x067A =1658
      DCX              ; [Decrement X]
      BNZ   D0215      ; =-8 [Branch if not zero]
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W0434      ; =0x0434 =1076
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W067A      ; =0x067A =1658
      CAD/  W054E,2    ; [Set word at address to 2]
D022B MVF   (5)/S0550,/W04B3 ; =0x0550 =1360,=0x04B3 =1203 [Memory move, direct, direct]
      LDBB= X'B0'      ; =176(-80) ='0' [Load BL with immediate]
      CLR   A,5        ; [Set A to 5]
      CFB   /W04B3(10),/N01C4(3) ; =0x04B3 =1203,=0x01C4 =452 [Convert from bignum, direct, direct]
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W047D      ; =0x047D =1149
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W067A      ; =0x067A =1658
      LDX=  W0680      ; =0x0680 =1664 [Load X with immediate]
      LDA=  X'0013'    ; =0x0013 =19 [Load A with immediate]
      STA/  W054A      ; =0x054A =1354 [Store A direct]
D0250 XFR=  S05FF,Y    ; =0x05FF =1535 [Transfer immediate to Y]
      XFR=  S0650,Z    ; =0x0650 =1616 [Transfer immediate to Z]
      LDA=  X'0013'    ; =0x0013 =19 [Load A with immediate]
      STA/  W054C      ; =0x054C =1356 [Store A direct]
D025E LDAB+ X+         ; [Load AL indexed, direct, post-incremented]
      JSR/  F033E      ; =0x033E =830 [Jump to subroutine direct]
      JSR/  F0355      ; =0x0355 =853 [Jump to subroutine direct]
      DEC/  W054C      ; =0x054C =1356 [Decrement word at address by 1]
      BP    D025E      ; =-14 [Branch on plus]
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W05FD      ; =0x05FD =1533
      DEC/  W054A      ; =0x054A =1354 [Decrement word at address by 1]
      BP    D0250      ; =-39 [Branch on plus]
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W067A      ; =0x067A =1658
      JSR/  F0312      ; =0x0312 =786 [Jump to subroutine direct]
      DW    W067A      ; =0x067A =1658
      POP   XU,6       ; [Pop Z Y X from the stack]
      RSR              ; [Return from subroutine]
*
* Function F0284
*
F0284 JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W04E2      ; =0x04E2 =1250
      JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W036B      ; =0x036B =875
      JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W067A      ; =0x067A =1658
      JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W04BA      ; =0x04BA =1210
      JSR/  F02F2      ; =0x02F2 =754 [Jump to subroutine direct]
      LDA/  W0559      ; =0x0559 =1369 [Load A direct]
      BNZ   D02A3      ; =+3 [Branch if not zero]
      JMP/  J012B      ; =0x012B =299 [Jump direct]
D02A3 JSR/  F0811      ; =0x0811 =2065 [Jump to subroutine direct]
      DW    W0559      ; =0x0559 =1369
      LDA/  W0559      ; =0x0559 =1369 [Load A direct]
      MVFR  /S055B,/S052B ; =0x055B =1371,=0x052B =1323 [Memory move (len in A), direct, direct]
D02B1 JSR/  F02DA      ; =0x02DA =730 [Jump to subroutine direct]
      DW    W04CD      ; =0x04CD =1229
      JSR/  F02F2      ; =0x02F2 =754 [Jump to subroutine direct]
      LDA/  W0559      ; =0x0559 =1369 [Load A direct]
      BNZ   D02C1      ; =+3 [Branch if not zero]
      JMP/  J012B      ; =0x012B =299 [Jump direct]
D02C1 LDA/  W0559      ; =0x0559 =1369 [Load A direct]
      CTB   /S055B(10),/N02D4(1) ; =0x055B =1371,=0x02D4 =724 [Convert to bignum, direct, direct]
      BF    D02B1      ; =-28 [Branch on fault]
      SVC   5          ; =0x05 [Service call TS - load transient module]
      DB    X'0E'      ; =0x0E =14 [TODO: selector]
      DW    S052B      ; =0x052B =1323 [address of filename]
      DW    L04E5      ; =0x04E5 =1253 [address of FCB]
N02D4 DW    X'0002'    ; =0x0002 =2 [disk number]
      XAB              ; [Transfer A to B]
      BNZ   F0284      ; =-85 [Branch if not zero]
      RSR              ; [Return from subroutine]
*
* Function F02DA
*
F02DA CLR   A,2        ; [Set A to 2]
      STAB/ B0524      ; =0x0524 =1316 [Store AL direct]
      LDA+  X+         ; [Load A indexed, direct, post-incremented]
      STA/  S0527      ; =0x0527 =1319 [Store A direct]
      LDA+  A          ; [Load A from address in A]
      STA/  W0525      ; =0x0525 =1317 [Store A direct]
      LDB=  W0521      ; =0x0521 =1313 [Load B with immediate]
      SVC   16         ; =0x10 [Service call SYSIO - device-independent logical I/O [all units]]
      SVC   8          ; =0x08 [Service call RBWT - wait for RCB to go ready]
      DW    W0521      ; =0x0521 =1313 [TODO: arg 1]
      RSR              ; [Return from subroutine]
*
* Function F02F2
*
F02F2 CLR   A,1        ; [Set A to 1]
      STAB/ B0524      ; =0x0524 =1316 [Store AL direct]
      LDA=  X'0050'    ; =0x0050 =80 [Load A with immediate]
      STA/  W0525      ; =0x0525 =1317 [Store A direct]
      LDA=  W0559      ; =0x0559 =1369 [Load A with immediate]
      STA/  S0527      ; =0x0527 =1319 [Store A direct]
      LDB=  W0521      ; =0x0521 =1313 [Load B with immediate]
      SVC   16         ; =0x10 [Service call SYSIO - device-independent logical I/O [all units]]
D0308 LDAB/ W0521      ; =0x0521 =1313 [Load AL direct]
      BP    D0311      ; =+4 [Branch on plus]
      SVC   7          ; =0x07 [Service call WT - unconditional wait]
      JMP   D0308      ; =-9 [Jump relative]
D0311 RSR              ; [Return from subroutine]
*
* Function F0312
*
F0312 LDA+  X+         ; [Load A indexed, direct, post-incremented]
      STA/  W0513      ; =0x0513 =1299 [Store A direct]
      LDA+  A          ; [Load A from address in A]
      STA/  W0511      ; =0x0511 =1297 [Store A direct]
      LDB=  W0503      ; =0x0503 =1283 [Load B with immediate]
      SVC   24         ; =0x18 [Service call LIOC - logical I/O control]
      LDAB/ W0503      ; =0x0503 =1283 [Load AL direct]
      BNZ   D0326      ; =+1 [Branch if not zero]
      RSR              ; [Return from subroutine]
*
D0326 LDBB= X'32'      ; =50 [Load BL with immediate]
      AABB             ; [AL + BL -> BL]
      SVC   107        ; =0x6B [Service call ABRTR - abort with abort code in AL]
*
* Function F032B
*
F032B MVF   (3)-X,/S0544 ; =0x0544 =1348 [Memory move, indexed, direct]
      INR   X,3        ; [Increment X by 3]
      LDB=  L04E5      ; =0x04E5 =1253 [Load B with immediate]
      SVC   24         ; =0x18 [Service call LIOC - logical I/O control]
      LDAB/ L04E5      ; =0x04E5 =1253 [Load AL direct]
      BNZ   D0326      ; =-23 [Branch if not zero]
      RSR              ; [Return from subroutine]
*
* Function F033E
*
F033E STAB- S-         ; [Store AL indexed, pre-decremented, direct]
      LDA=  X'C0C0'    ; =0xC0C0 =49344(-16192) ='@','@' [Load A with immediate]
      STA+  Y          ; [Store A to address in Y]
      CLR   A,2        ; [Set A to 2]
      LDBB= X'B0'      ; =176(-80) ='0' [Load BL with immediate]
      CFB   -Y(16),-S(1) ; [Convert from bignum, indexed, indexed]
      INR   Y,2        ; [Increment Y by 2]
      LDAB= X'A0'      ; =160(-96) =' ' [Load AL with immediate]
      STAB+ Y+         ; [Store AL indexed, direct, post-incremented]
      LDAB+ S+         ; [Load AL indexed, direct, post-incremented]
      RSR              ; [Return from subroutine]
*
* Function F0355
*
F0355 CLRB  AU         ; [Clear AU]
      LDB=  X'00A0'    ; =0x00A0 =160 [Load B with immediate]
      SAB              ; [A - B -> B]
      BM    D0364      ; =+7 [Branch on minus]
      INAB             ; [Increment AL]
      BZ    D0364      ; =+4 [Branch if zero]
      DCAB             ; [Decrement AL]
      STAB+ Z+         ; [Store AL indexed, direct, post-incremented]
      RSR              ; [Return from subroutine]
*
D0364 LDAB= X'A0'      ; =160(-96) =' ' [Load AL with immediate]
      LDAB= X'DF'      ; =223(-33) =DEL [Load AL with immediate]
      STAB+ Z+         ; [Store AL indexed, direct, post-incremented]
      RSR              ; [Return from subroutine]
*
W036B DW    X'0020'    ; =0x0020 =32
      DC    'ZHEXLST 10/19/82 DISK FILE DUMP'
      DB    X'8D'      ; =0x8D =141(-115) =CR
W038D DW    X'002D'    ; =0x002D =45
      DC    'ENTER F, Q, N, P, OR RELATIVE SECTOR NUMBER /'
W03BC DW    X'000F'    ; =0x000F =15
      DB    X'87'      ; =0x87 =135(-121) =BEL
      DC    'INVALID ENTRY'
      DB    X'8D'      ; =0x8D =141(-115) =CR
W03CD DW    X'0017'    ; =0x0017 =23
      DB    X'87'      ; =0x87 =135(-121) =BEL
      DC    'INVALID SECTOR NUMBER'
      DB    X'8D'      ; =0x8D =141(-115) =CR
W03E6 DW    X'000F'    ; =0x000F =15
      DC    'END OF PROGRAM'
      DB    X'8D'      ; =0x8D =141(-115) =CR
W03F7 DW    X'003B'    ; =0x003B =59
      DC    'DUMP OF FILE: '
S0407 DC    '                       SECTOR NUMBER: '
W042D DS    5          ; =0x0005 [Uninitialized memory]
      DC    ' '        ; hex:A0
      DB    X'8D'      ; =0x8D =141(-115) =CR
W0434 DW    X'0047'    ; =0x0047 =71
S0436 DS    8          ; =0x0008 [Uninitialized memory]
      DC    ' AT '     ; hex:A0C1D4A0
S0442 DS    8          ; =0x0008 [Uninitialized memory]
S044A DC    '          HEX DUMP OF FILE: '
S0466 DC    '                      '
      DB    X'8D'      ; =0x8D =141(-115) =CR
W047D DW    X'003B'    ; =0x003B =59
      DC    '                                     SECTOR NUMBER: '
W04B3 DS    5          ; =0x0005 [Uninitialized memory]
      DC    ' '        ; hex:A0
      DB    X'8D'      ; =0x8D =141(-115) =CR
W04BA DW    X'0011'    ; =0x0011 =17
      DC    'ENTER FILE NAME /'
W04CD DW    X'0013'    ; =0x0013 =19
      DC    'ENTER DISK NUMBER /'
W04E2 DW    X'0001'    ; =0x0001 =1
      DB    X'8C'      ; =0x8C =140(-116) =FF
L04E5 DW    X'0000'    ; =0x0000 =0
      DW    X'2101'    ; =0x2101 =8449
      DW    X'0190'    ; =0x0190 =400
      DW    W067E      ; =0x067E =1662
      DB    0,3        ; =0x00,0x0003
      DW    X'0502'    ; =0x0502 =1282
      DW    X'FF00'    ; =0xFF00 =65280(-256)
      DB    0,11       ; =0x00,0x000B
      DW    W0543      ; =0x0543 =1347
      DW    X'0000'    ; =0x0000 =0
W0503 DW    X'0083'    ; =0x0083 =131
      DB    X'22'      ; =0x22 =34
B0506 DW    X'0200'    ; =0x0200 =512
      DB    0,7        ; =0x00,0x0007
      DW    X'0102'    ; =0x0102 =258
W0511 DW    X'0078'    ; =0x0078 =120
W0513 DW    W05FD      ; =0x05FD =1533
      DB    0,12       ; =0x00,0x000C
W0521 DW    X'0082'    ; =0x0082 =130
      DB    X'23'      ; =0x23 =35
B0524 DB    X'00'      ; =0x00 =0
W0525 DW    X'0000'    ; =0x0000 =0
S0527 DB    0,4        ; =0x00,0x0004
S052B DB    0,21       ; =0x00,0x0015
W0540 DW    X'0000'    ; =0x0000 =0
W0542 DS    1          ; =0x0001 [Uninitialized memory]
W0543 DB    X'00'      ; =0x00 =0
S0544 DB    0,3        ; =0x00,0x0003
N0547 DB    X'00'      ; =0x00 =0
W0548 DW    X'0000'    ; =0x0000 =0
W054A DS    2          ; =0x0002 [Uninitialized memory]
W054C DS    2          ; =0x0002 [Uninitialized memory]
W054E DW    X'0001'    ; =0x0001 =1
S0550 DC    '@@@@@'    ; hex:C0C0C0C0C0
W0555 DW    X'0002'    ; =0x0002 =2
      DW    X'848D'    ; =0x848D =33933(-31603) =EOT,CR
W0559 DS    2          ; =0x0002 [Uninitialized memory]
S055B DC    '                                                            '
      DC    '                    '
W05AB DW    X'0050'    ; =0x0050 =80
S05AD DC    '                                                            '
S05E9 DC    '                    '
W05FD DW    X'0078'    ; =0x0078 =120
S05FF DC    '                                                            '
      DC    '                    ('
S0650 DC    '                    )                 '
      DB    X'8D'      ; =0x8D =141(-115) =CR
W0677 DW    X'0001'    ; =0x0001 =1
      DB    X'8C'      ; =0x8C =140(-116) =FF
W067A DW    X'0002'    ; =0x0002 =2
      DC    ' '        ; hex:A0
      DB    X'8D'      ; =0x8D =141(-115) =CR
W067E DW    X'0191'    ; =0x0191 =401
W0680 DS    400        ; =0x0190 [Uninitialized memory]
      DB    X'00'      ; =0x00 =0
*
* Function F0811
*
F0811 LDA+  X+         ; [Load A indexed, direct, post-incremented]
      STX-  S-         ; [Store X indexed, pre-decremented, direct]
      XFR   Y,X        ; [Transfer Y to X]
      STX-  S-         ; [Store X indexed, pre-decremented, direct]
      LDX+  A+         ; [Load X indexed, direct, post-incremented]
      XAY              ; [Transfer A to Y]
D081C DCX              ; [Decrement X]
      BM    D0832      ; =+19 [Branch on minus]
      LDAB+ Y          ; [Load AL from address in Y]
      LDBB= X'FA'      ; =250(-6) ='z' [Load BL with immediate]
      SABB             ; [AL - BL -> BL]
      BGZ   D082E      ; =+9 [Branch if greater than zero]
      LDBB= X'E1'      ; =225(-31) ='a' [Load BL with immediate]
      SABB             ; [AL - BL -> BL]
      BM    D082E      ; =+4 [Branch on minus]
      LDAB= X'C1'      ; =193(-63) ='A' [Load AL with immediate]
      ADDB  BL,AL      ; [BL + AL -> AL]
D082E STAB+ Y+         ; [Store AL indexed, direct, post-incremented]
      JMP   D081C      ; =-22 [Jump relative]
D0832 LDA+  S+         ; [Load A indexed, direct, post-incremented]
      XAY              ; [Transfer A to Y]
      LDX+  S+         ; [Load X indexed, direct, post-incremented]
      RSR              ; [Return from subroutine]
*
      END   ENTRY
